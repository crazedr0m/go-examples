version: '3.8'

# не будем каждый раз заново собирать контейнер для приложения
services:
  # собираем в контейнере, бинарник локально
  go-app-build:
    image: golang:1.24-alpine
    working_dir: /app
    container_name: go-app-build
    entrypoint: sh -c "go build -o main ."
    volumes:
      - ./:/app

  # запускаем локальный бинатрник в контейнере
  go-app-run:
#    image: ubuntu:latest
    image: alpine:latest
    environment:
      - RABBIT_URL=${RABBIT_URL}
    container_name: go-app-run
    entrypoint: ["./main"]
    working_dir: /root
    depends_on:
      rabbitmq:
        condition: service_healthy
      go-app-build:
        condition: service_started
    networks:
      - test-net
    volumes:
      - ./test.sh:/root/test.sh # не будем пересобирать контейнер, чтобы запустить новый вариант приложения
      - ./main:/root/main # не будем пересобирать контейнер, чтобы запустить новый вариант приложения
      - ./config.yml:/root/config.yml # не будем пересобирать контейнер, чтобы обновить конфиг

#https://hub.docker.com/_/rabbitmq
  rabbitmq:
    container_name: test-rabbitmq
    image: "rabbitmq:3-management-alpine"
#    volumes:
#      - "${RABBIT_DATA}:/var/lib/rabbitmq"
#      - "${RABBIT_ETC}:/etc/rabbitmq"
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_PASS}
      RABBITMQ_DEFAULT_VHOST: ${RABBIT_VHOST}
    expose:
#      - 15692
      - 15672
      - 5672
    networks:
      - test-net
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s
    ports:
#     - "${RABBIT_HOST}:${RABBIT_METRIC}:15692" # prometheus metrics
      - "${RABBIT_HOST}:${RABBIT_MANAGE}:15672" # http managment
      - "${RABBIT_HOST}:${RABBIT_MAIN}:5672" #

networks:
  test-net:
    driver: bridge
